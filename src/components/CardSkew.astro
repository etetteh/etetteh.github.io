---
import ReadMore from "../components/ReadMore.astro";
import { Picture } from 'astro:assets';

interface Props {
  imageUrl: any;
  imageAlt: string;
  ballColor?: string;
  contentLink?: string;
  readMoreText?: string;
}

const {
  imageUrl,
  imageAlt = "Default image description",
  ballColor = "indigo",
  contentLink = "#",
  readMoreText = "Read More"
} = Astro.props;

---


<div class="flex justify-center items-center w-full">
  <div class="w-full m-3 max-w-md xl:max-w-full">
      <card-skew 
          className="rounded-2xl border-2 shadow-md hover:border-[color:var(--card-color)] hover:shadow-[color:var(--card-color)]"
          style={{ '--card-color': ballColor }}
          data-perspective="700"
      >  
      <div class="bg-white overflow-hidden shadow-md transform rounded-2xl transition-transform duration-300">
        <div class="relative overflow-hidden object-fit">
          <Picture
              formats={['avif', 'webp']}
              src={imageUrl}
              widths={[
              375, 430, 437, 460, 820, 834, 1024, 1130, 1280, 1366, 1440, 1680, 1920, 2560
              ]}
              sizes={`
              (max-width: 375px) 375px,   /* iPhone 15, iPhone 14, iPhone 15 Pro */
              (max-width: 430px) 430px,   /* iPhone 15 Pro Max, Samsung Galaxy A15 4G/5G */
              (max-width: 437px) 437px,   /* Samsung Galaxy A55 5G, Xiaomi Redmi 13C 4G */
              (max-width: 460px) 460px,   /* Samsung Galaxy S24 Ultra */
              (max-width: 820px) 820px,   /* Apple iPad, iPad Air */
              (max-width: 834px) 834px,   /* iPad Pro 11" */
              (max-width: 1024px) 1024px, /* Apple iPad Pro 12.9", Google Pixel Tablet */
              (max-width: 1130px) 1130px, /* Microsoft Surface Pro 9, Lenovo tablets */
              (max-width: 1280px) 1280px, /* MacBook Air M3, Samsung Galaxy Tab A9+ */
              (max-width: 1366px) 1366px, /* Dell XPS 13, Samsung Galaxy Tab S9 series */
              (max-width: 1440px) 1440px, /* iMac 24", HP Pavilion Plus 14 */
              (max-width: 1680px) 1680px, /* Alienware Aurora R16, NZXT Player: One */
              (max-width: 1920px) 1920px, /* HP Envy 34, Mac Mini (M2 Pro), Corsair One i500 */
              (max-width: 2560px) 2560px, /* Mac Studio, 32-inch 4K displays */
              (max-width: 3840px) 3840px, /* 32-inch 4K display */
              auto         /* Default for larger */
              `}
              
              width="1600"
              height="900"
              alt={imageAlt}
              decoding="async"
              loading="lazy"
              fit="auto"
              class="object-fill w-full h-[320px] sm:h-[320px] md:h-[350px] lg:h-[370px] xl:h-[370px] 2xl:h-[390px] 4k:h-[400px] rounded-t-xl"
              layout="responsive"
          />
        </div>
        <div class="p-1">
          <div class="m-3 h-[70px] leading-none text-left">
            <slot class="block text-pretty text-sm sm:text-base md:text-lg lg:text-xl leading-none" />
          </div>
          <div class="ml-3 mt-10">
            <ReadMore contentLink={contentLink} text={readMoreText} />
          </div>
        </div>
      </div>
    </card-skew>
  </div>
</div>

<style>
  card-skew {
    display: block;
    transition: transform 0.07s ease-in-out;
    transform-style: preserve-3d;
  }
</style>

<script>
  document.addEventListener('DOMContentLoaded', () => {
    const cards = document.querySelectorAll('card-skew');
    const perspective = 700;
    const maxRotation = 3;

    cards.forEach((card) => {
      const handleMouseMove = (e: MouseEvent) => {
        const cardElement = card as HTMLElement;
        const rect = cardElement.getBoundingClientRect();
        const x = e.clientX - rect.left - rect.width / 2;
        const y = e.clientY - rect.top - rect.height / 2;

        const rotateX = (y / (rect.height / 2)) * maxRotation;
        const rotateY = (-x / (rect.width / 2)) * maxRotation;

        cardElement.style.transform = `perspective(${perspective}px) rotateX(${rotateX}deg) rotateY(${rotateY}deg)`;
      };

      (card as HTMLElement).addEventListener('mousemove', handleMouseMove as EventListener);
      (card as HTMLElement).addEventListener('mouseleave', () => {
        (card as HTMLElement).style.transform = `perspective(${perspective}px) rotateX(0) rotateY(0)`;
      });
    });
  });
</script>

