---
interface Props {
  highlights: {
    title: string;
    description: string;
    imageUrl: string;
    imageAlt: string;
    shadowColor: string;
    contentLink: string;
    category?: string;
    stats?: { label: string; value: string }[];
  }[];
}

const { highlights } = Astro.props;
---

<section class="relative py-16 sm:py-20 lg:py-24 overflow-hidden">
  <div class="container mx-auto px-4 sm:px-6 lg:px-8">
    <div class="text-center mb-12 md:mb-20">
      <h2 class="text-3xl sm:text-4xl md:text-5xl font-bold bg-clip-text text-transparent bg-gradient-to-r from-gray-900 to-gray-600 dark:from-white dark:to-gray-300 mb-4">
        Real-World Impact
      </h2>
      <div class="w-24 h-1 bg-gradient-to-r from-primary-500 to-secondary-500 mx-auto rounded-full"></div>
    </div>

    <div class="grid grid-cols-1 sm:grid-cols-2 gap-8 lg:gap-12 mx-auto max-w-7xl">
      {
        highlights.map((highlight, index) => (
          <div
            class={`group relative transform transition-all duration-500 hover:scale-[1.02] ${
              index % 2 === 1 ? "sm:translate-y-16 xl:translate-y-24" : ""
            }`}
          >
            <a href={highlight.contentLink} class="block">
              <div class="relative rounded-2xl overflow-hidden shadow-2xl">
                <div class={`absolute inset-0 bg-gradient-to-br ${highlight.shadowColor} opacity-90 mix-blend-multiply transition-opacity duration-300 group-hover:opacity-95`} />
                
                <img
                  src={highlight.imageUrl}
                  alt={highlight.imageAlt}
                  class="w-full h-[400px] sm:h-[450px] md:h-[540px] lg:h-[600px] object-cover transform transition-transform duration-700 group-hover:scale-110"
                />

                <div class="absolute inset-0 p-6 sm:p-8 md:p-10 flex flex-col justify-end">
                  {highlight.category && (
                    <span class="inline-flex items-center px-3 py-1 rounded-full text-xs font-medium bg-white/20 text-white backdrop-blur-sm mb-4 w-fit">
                      {highlight.category}
                    </span>
                  )}

                  <h3 class="text-xl sm:text-2xl md:text-3xl font-bold text-white mb-3 sm:mb-4 transform transition-all duration-300 group-hover:translate-x-2">
                    {highlight.title}
                  </h3>

                  <p class="text-sm sm:text-base text-gray-100 line-clamp-3 sm:line-clamp-4 md:line-clamp-5 transform transition-all duration-300 group-hover:translate-x-2">
                    {highlight.description}
                  </p>

                  {highlight.stats && (
                    <div class="grid grid-cols-2 sm:grid-cols-3 gap-4 mt-6 pt-6 border-t border-white/20">
                      {highlight.stats.map((stat) => (
                        <div class="text-white">
                          <div class="text-2xl font-bold">{stat.value}</div>
                          <div class="text-sm opacity-80">{stat.label}</div>
                        </div>
                      ))}
                    </div>
                  )}

                  <div class="absolute bottom-6 right-6 opacity-0 transform translate-x-6 transition-all duration-300 group-hover:opacity-100 group-hover:translate-x-0">
                    <svg
                      xmlns="http://www.w3.org/2000/svg"
                      class="h-6 w-6 text-white"
                      fill="none"
                      viewBox="0 0 24 24"
                      stroke="currentColor"
                    >
                      <path
                        stroke-linecap="round"
                        stroke-linejoin="round"
                        stroke-width="2"
                        d="M17 8l4 4m0 0l-4 4m4-4H3"
                      />
                    </svg>
                  </div>
                </div>
              </div>
            </a>
          </div>
        ))
      }
    </div>
  </div>
</section>

<style>
  @keyframes float {
    0% { transform: translateY(0px); }
    50% { transform: translateY(-20px); }
    100% { transform: translateY(0px); }
  }

  .animate-float {
    animation: float 6s ease-in-out infinite;
  }
</style>