---
import { Picture } from 'astro:assets';

interface Props {
  imageUrl: any;
  imageAlt?: string;
  shadowColor?: string;
  cardHeight?: {
    default: string;
    sm?: string;
    md?: string;
    lg?: string;
    xl?: string;
  };
}

const {
  imageUrl,
  imageAlt = "Default image description",
  shadowColor = "indigo",
  cardHeight = { default: "270px" }
} = Astro.props;
---

<div class="flex justify-center items-center w-full">
  <div class="w-full">
    <card-skew class={`overflow-hidden rounded-2xl border hover:border-${shadowColor}-500 hover:shadow-lg hover:shadow-${shadowColor}-500 transition-shadow duration-300`} data-perspective="700">
      <div class="relative overflow-hidden">
        <Picture
          formats={['avif', 'webp']}
          src={imageUrl}
          widths={[375, 430, 437, 460, 820, 834, 1024, 1130, 1280, 1366, 1440, 1680, 1920, 2560]}
          sizes="(max-width: 375px) 375px, (max-width: 430px) 430px, (max-width: 437px) 437px, (max-width: 460px) 460px, (max-width: 820px) 820px, (max-width: 834px) 834px, (max-width: 1024px) 1024px, (max-width: 1130px) 1130px, (max-width: 1280px) 1280px, (max-width: 1366px) 1366px, (max-width: 1440px) 1440px, (max-width: 1680px) 1680px, (max-width: 1920px) 1920px, (max-width: 2560px) 2560px, (max-width: 3840px) 3840px, auto"
          alt={imageAlt}
          class="responsive-image"
          width="1600"
          height="900"
        />
        <div class="absolute inset-0 flex flex-col justify-end text-left mb-0 pb-0 bg-gradient-to-t from-black/70 to-transparent">
          <slot class="block text-white text-lg sm:text-xl md:text-2xl lg:text-3xl leading-tight" />
        </div>
      </div>
    </card-skew>
  </div>
</div>

<style define:vars={{
  cardHeight: cardHeight.default,
  cardHeightSm: cardHeight.sm || cardHeight.default,
  cardHeightMd: cardHeight.md || cardHeight.sm || cardHeight.default,
  cardHeightLg: cardHeight.lg || cardHeight.md || cardHeight.sm || cardHeight.default,
  cardHeightXl: cardHeight.xl || cardHeight.lg || cardHeight.md || cardHeight.sm || cardHeight.default,
}}>
  card-skew {
    display: block;
    transition: transform 0.07s ease-in-out;
    transform-style: preserve-3d;
  }

  .absolute {
    position: absolute;
    top: 0;
    right: 0;
    bottom: 0;
    left: 0;
  }

  .responsive-image {
    height: var(--cardHeight);
  }
  @media (min-width: 640px) {
    .responsive-image {
      height: var(--cardHeightSm);
    }
  }
  @media (min-width: 768px) {
    .responsive-image {
      height: var(--cardHeightMd);
    }
  }
  @media (min-width: 1024px) {
    .responsive-image {
      height: var(--cardHeightLg);
    }
  }
  @media (min-width: 1280px) {
    .responsive-image {
      height: var(--cardHeightXl);
    }
  }
</style>

<script>
  document.addEventListener('DOMContentLoaded', () => {
    const cards = document.querySelectorAll('card-skew');
    const perspective = 700;
    const maxRotation = 3;

    cards.forEach(card => {
      const handleMouseMove = (e: MouseEvent) => {
        const cardElement = card as HTMLElement;
        const rect = cardElement.getBoundingClientRect();
        const x = e.clientX - rect.left - rect.width / 2;
        const y = e.clientY - rect.top - rect.height / 2;
        
        const rotateX = y / (rect.height / 2) * maxRotation;
        const rotateY = -x / (rect.width / 2) * maxRotation;
        
        cardElement.style.transform = `perspective(${perspective}px) rotateX(${rotateX}deg) rotateY(${rotateY}deg)`;
      };

      (card as HTMLElement).addEventListener('mousemove', handleMouseMove);
      (card as HTMLElement).addEventListener('mouseleave', () => {
        (card as HTMLElement).style.transform = `perspective(${perspective}px) rotateX(0) rotateY(0)`;
      });
    });
  });
</script>
