---
// BlogPage.astro
import { getCollection } from "astro:content";
import type { CollectionEntry } from "astro:content";
import BlogPostCard from '../../components/BlogCard.astro';
import Layout from "../../layouts/Layout.astro";
import type { ImageMetadata } from 'astro';
import type { Page } from 'astro';

// Define the type for your blog post frontmatter
interface Frontmatter {
  postDate: string;
  imageURL: string;
  postTitle: string;
  postExcerpt: string;
  postURL: string;
  imageAlt?: string;
  categoryName: string;
  authorName: string;
  tags?: string[];
  shadowColor?: string;
}

// Extended blog post type that includes the processed image
interface ProcessedBlogPost extends CollectionEntry<"blog"> {
  imageURL?: ImageMetadata;
}

// Define pagination props type
interface PaginateFunction {
  paginate: (data: ProcessedBlogPost[], options: { pageSize: number }) => Promise<Page<ProcessedBlogPost>[]>;
}

// Define proper return type for getStaticPaths
export async function getStaticPaths({ paginate }: PaginateFunction) {
  // Load all blog posts using import.meta.glob
  const blogPosts = await getCollection("blog");

  // Process and sort posts
  const processedPosts = blogPosts
    .filter((post): post is CollectionEntry<"blog"> => {
      return post.data.postDate !== undefined && !isNaN(new Date(post.data.postDate).getTime());
    })
    .sort((a, b) => new Date(b.data.postDate).getTime() - new Date(a.data.postDate).getTime())
    .map(post => {
      return {
        ...post,
      };
    });

  return paginate(processedPosts, { pageSize: 9 });
}

// Define props type for the component
interface Props {
  page: Page<ProcessedBlogPost>;
}

const { page } = Astro.props as Props;

---

<style>
  .post-card:hover {
    transform: scale(1.03);
    transition: transform 0.3s ease-in-out;
  }
</style>

<Layout title="Blog - Enoch Tetteh">
    <header class="text-center py-10 rounded-lg mb-6">
        <h1 class="text-4xl font-bold tracking-wide">
            Explore <span class="bg-clip-text text-transparent bg-gradient-to-r from-green-400 to-blue-500">Insights</span> & 
            <span class="bg-clip-text text-transparent bg-gradient-to-r from-purple-500 to-pink-500">Innovations</span>
        </h1>
        <p class="mt-4 text-lg max-w-2xl mx-auto px-4">
            Delve into the latest <span class="bg-clip-text text-transparent bg-gradient-to-r from-green-400 to-blue-500">trends</span>, 
            <span class="bg-clip-text text-transparent bg-gradient-to-r from-purple-500 to-pink-500">deep dives</span>, and 
            <span class="bg-clip-text text-transparent bg-gradient-to-r from-yellow-500 to-orange-500">expert insights</span> across 
            <span class="bg-clip-text text-transparent bg-gradient-to-r from-green-400 to-blue-500">Agriculture</span>, 
            <span class="bg-clip-text text-transparent bg-gradient-to-r from-yellow-400 to-orange-500">Finance</span>, 
            <span class="bg-clip-text text-transparent bg-gradient-to-r from-red-400 to-purple-500">Healthcare</span>, and 
            <span class="bg-clip-text text-transparent bg-gradient-to-r from-indigo-400 to-purple-500">Insurance</span> – all curated to inspire and inform.
        </p>
    </header>

    <section class="mx-9 mb-1 p-6 rounded-lg">
      <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-6">
        {page.data.map((post) => (
          <div class="post-card inline-block min-w-[250px] ease-in-out duration-300">
            <BlogPostCard
              postTitle={post.data.postTitle}
              postExcerpt={post.data.postExcerpt}
              postURL={post.data.postURL}
              imageURL={post.data.imageURL}
              imageAlt={post.data.imageAlt || 'Blog Post Image'}
              postDate={post.data.postDate}
              categoryName={post.data.categoryName}
              authorName={post.data.authorName}
              tags={post.data.tags}
              shadowColor={post.data.shadowColor}
              showTags={false}
              showExcerpt={true}
            />
          </div>
        ))}
      </div>
      
        <!-- Pagination Controls -->
        <nav aria-label="Blog pagination" class="mt-8 flex justify-center gap-4">
            {page.currentPage > 1 && (
                <a 
                    href={page.url.prev} 
                    class="px-4 py-2 text-sm font-medium text-gray-700 bg-white border border-gray-300 rounded-lg hover:bg-gray-50"
                >
                    ← Previous
                </a>
            )}
            
            <span class="px-4 py-2 text-sm font-medium text-gray-700">
                Page {page.currentPage} of {page.lastPage}
            </span>
            
            {page.currentPage < page.lastPage && (
                <a 
                    href={page.url.next} 
                    class="px-4 py-2 text-sm font-medium text-gray-700 bg-white border border-gray-300 rounded-lg hover:bg-gray-50"
                >
                    Next →
                </a>
            )}
        </nav>
    </section>
</Layout>
