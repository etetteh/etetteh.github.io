---
import Layout from '../layouts/Layout.astro';
import Header from '../components/Header.astro';
import { loadJsonData } from '../utils/loadJsonData';

const initialData = await loadJsonData('projects');
---

<Layout title="Tailored Industry Projects - Enoch Tetteh">
    <!-- Global Styles -->
    <style>
        body, html {
            margin: 0;
            padding: 0;
            overflow-x: hidden;
        }

        .hovered {
            transform: scale(1.5);
            z-index: 10;
        }

        #hoverInfo {
            position: fixed;
            background-color: white;
            padding: 5px;
            border-radius: 2px;
            box-shadow: 0 0 10px rgba(0, 0, 0, 0.2);
            pointer-events: none;
            font-size: 12px;
            line-height: 1.1;
            z-index: 1000;
            display: none;
        }

        #orbitCanvas {
            display: block;
            margin: 0 auto;
        }
    </style>

    <!-- Header Section with responsive margins -->
    <div class="mt-20 ml-0 md:ml-1 lg:ml-14 xl:ml-32 2xl:ml-48">
        <Header />
    </div>
      
    <div class="flex flex-col-reverse md:flex-row gap-4 items-center justify-center">
        <div class="relative w-full md:w-1/2 aspect-cover">
            <canvas id="orbitCanvas" class="w-full h-[400px] bg-gray-0 dark:bg-gray-700"></canvas>
            <div id="hoverInfo" class="absolute hidden"></div>
        </div>
        
        <div class="relative w-full md:w-1/2 mt-8">
            <id id="ballDetails" class="w-full bg-gray-0 dark:bg-gray-700"></id>
        </div>
    </div>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/flowbite/1.8.0/flowbite.min.js"></script>
    <script is:inline define:vars={{ initialData }}>
        
        // const canvas = document.getElementById('orbitCanvas');
        // const ctx = canvas.getContext('2d');
        // const hoverInfo = document.getElementById('hoverInfo');

        // function resizeCanvas() {
        //     // Set canvas width to full parent width
        //     canvas.width = canvas.parentElement.clientWidth;
        //     canvas.height = canvas.parentElement.clientHeight;

            
        //     // Center coordinates based on the new canvas dimensions
        //     centerX = canvas.width / 2;
        //     centerY = canvas.height / 2;
        // }
        
        // // Function to get accurate mouse position relative to the canvas
        // function getMousePos(canvas, event) {
        //     const rect = canvas.getBoundingClientRect(); // Get canvas position relative to the viewport
        //     return {
        //         x: (event.clientX - rect.left) * (canvas.width / rect.width), // Scale x-coordinate
        //         y: (event.clientY - rect.top) * (canvas.height / rect.height) // Scale y-coordinate
        //     };
        // }

        // // Initial setup and dynamic resizing
        // let centerX, centerY;
        // resizeCanvas();
        // window.addEventListener('resize', resizeCanvas);

        // let currentNode = initialData;
        // let balls = [];
        // let hoveredBall = null;

        // function draw() {
        //     ctx.clearRect(0, 0, canvas.width, canvas.height);
        //     balls = [];
        //     drawCentralBall(currentNode);
        //     drawOrbit(currentNode.children);
        //     requestAnimationFrame(draw);
        // }

        const canvas = document.getElementById('orbitCanvas');
        const ctx = canvas.getContext('2d');
        const hoverInfo = document.getElementById('hoverInfo');

        // Add state tracking for navigation
        let navigationStack = [];
        let currentNode = initialData;

        function resizeCanvas() {
            canvas.width = canvas.parentElement.clientWidth;
            canvas.height = canvas.parentElement.clientHeight;
            centerX = canvas.width / 2;
            centerY = canvas.height / 2;
        }

        function getMousePos(canvas, event) {
            const rect = canvas.getBoundingClientRect();
            return {
                x: (event.clientX - rect.left) * (canvas.width / rect.width),
                y: (event.clientY - rect.top) * (canvas.height / rect.height)
            };
        }

        // Initial setup and dynamic resizing
        let centerX, centerY;
        resizeCanvas();
        window.addEventListener('resize', resizeCanvas);

        let balls = [];
        let hoveredBall = null;

        // Add back button drawing function
        function drawBackButton() {
            if (navigationStack.length > 0) {
                const isDarkMode = window.matchMedia && window.matchMedia('(prefers-color-scheme: dark)').matches;
                const buttonColor = isDarkMode ? '#4A5568' : '#EDF2F7';
                const textColor = isDarkMode ? '#E2E8F0' : '#2D3748';
                
                // Position the back button in the top-left corner
                const buttonX = 60;
                const buttonY = 30;
                const buttonWidth = 80;
                const buttonHeight = 30;
                
                // Draw button background
                ctx.fillStyle = buttonColor;
                ctx.beginPath();
                ctx.roundRect(buttonX - buttonWidth/2, buttonY - buttonHeight/2, buttonWidth, buttonHeight, 15);
                ctx.fill();
                
                // Draw button text
                ctx.fillStyle = textColor;
                ctx.font = "14px Arial";
                ctx.textAlign = "center";
                ctx.textBaseline = "middle";
                ctx.fillText("← Back", buttonX, buttonY);
                
                // Add button to balls array for click detection
                balls.push({
                    x: buttonX,
                    y: buttonY,
                    width: buttonWidth,
                    height: buttonHeight,
                    isBackButton: true
                });
            }
        }

        function isInsideButton(pos, button) {
            return (
                pos.x >= button.x - button.width/2 &&
                pos.x <= button.x + button.width/2 &&
                pos.y >= button.y - button.height/2 &&
                pos.y <= button.y + button.height/2
            );
        }

        function draw() {
            ctx.clearRect(0, 0, canvas.width, canvas.height);
            balls = [];
            drawCentralBall(currentNode);
            drawOrbit(currentNode.children);
            drawBackButton();
            requestAnimationFrame(draw);
        }

        // Update click handler to include back button functionality
        document.addEventListener('click', function(evt) {
            const mousePos = getMousePos(canvas, evt);
            let ballClicked = false;

            balls.forEach(ball => {
                if (ball.isBackButton && isInsideButton(mousePos, ball)) {
                    // Handle back button click
                    if (navigationStack.length > 0) {
                        currentNode = navigationStack.pop();
                        displayBallDetails(currentNode);
                    }
                    ballClicked = true;
                } else if (!ball.isBackButton && isInsideBall(mousePos, ball)) {
                    ballClicked = true;
                    if (ball.isCentral) {
                        displayBallDetails(ball);
                    } else if (ball.children && ball.children.length > 0) {
                        navigationStack.push(currentNode);
                        currentNode = ball;
                        displayBallDetails(currentNode);
                    } else {
                        displayBallDetails(ball);
                    }
                }
            });
        });

        function drawCentralBall(node) {
            const isDarkMode = window.matchMedia && window.matchMedia('(prefers-color-scheme: dark)').matches;

            // Use the ballColor from the node directly or fallback to dark green
            const ballColor = node.ballColor || (isDarkMode ? 'teal' : '#FFD700');
            const textColor = isDarkMode ? '#E2E8F0' : '#1A202C'; // Text color based on theme

            // Draw the central ball
            ctx.beginPath();
            ctx.arc(centerX, centerY, 50, 0, Math.PI * 2);
            ctx.fillStyle = ballColor; // Fill with the corresponding ballColor from node
            ctx.fill();
            

            // Add a subtle shadow for depth
            ctx.shadowColor = isDarkMode ? 'rgba(0, 0, 0, 0.3)' : 'rgba(0, 0, 0, 0.1)';
            ctx.shadowBlur = 10;
            ctx.shadowOffsetX = 2;
            ctx.shadowOffsetY = 2;

            // Draw text inside the ball
            ctx.fillStyle = textColor;
            ctx.textAlign = 'center';
            ctx.font = "bold 16px Arial";
            ctx.fillText(node.name, centerX, centerY + 5);

            // Reset shadow to avoid affecting other elements
            ctx.shadowColor = 'transparent';
            ctx.shadowBlur = 0;
            ctx.shadowOffsetX = 0;
            ctx.shadowOffsetY = 0;

            balls.push({
            x: centerX,
            y: centerY,
            radius: 55,

            name: node.name,
            postTitle: node.postTitle,
            description: node.description,
            imageURL: node.imageURL,
            postURL: node.postURL,
            ballColor,
            industry: node.industry,
            isCentral: true,
            });
        }

        function drawOrbit(nodes) {
            if (!nodes) return;

            const orbitRadius = 135;
            const ballRadius = 37;
            const angleStep = (Math.PI * 2) / nodes.length;

            // Get the current theme
            const isDarkMode = window.matchMedia && window.matchMedia('(prefers-color-scheme: dark)').matches;

            // Set text color based on theme
            const textColor = isDarkMode ? '#E2E8F0' : '#2D3748';

            for (let i = 0; i < nodes.length; i++) {
                const angle = i * angleStep;
                const ballX = centerX + orbitRadius * Math.cos(angle);
                const ballY = centerY + orbitRadius * Math.sin(angle);

                // Infer ball color from nodes[i].ballColor or use a default color
                const ballColor = nodes[i].ballColor || (isDarkMode ? '#2C7A7B' : '#4FD1C5'); // Fallback color

                // Draw ball
                ctx.beginPath();
                ctx.arc(ballX, ballY, ballRadius, 0, Math.PI * 2);
                ctx.fillStyle = ballColor;
                ctx.fill();

                // Add subtle shadow for depth
                ctx.shadowColor = isDarkMode ? 'rgba(0, 0, 0, 0.3)' : 'rgba(0, 0, 0, 0.1)';
                ctx.shadowBlur = 5;
                ctx.shadowOffsetX = 2;
                ctx.shadowOffsetY = 2;

                // Draw text
                ctx.fillStyle = textColor;
                ctx.textAlign = 'center';
                ctx.font = "11px Arial";
                ctx.fillText(nodes[i].name, ballX, ballY + ballRadius + 15);

                // Reset shadow
                ctx.shadowColor = 'transparent';
                ctx.shadowBlur = 0;
                ctx.shadowOffsetX = 0;
                ctx.shadowOffsetY = 0;

                balls.push({
                    x: ballX,
                    y: ballY,
                    radius: ballRadius,
                    name: nodes[i].name,
                    postTitle: nodes[i].postTitle,
                    description: nodes[i].description,
                    imageURL: nodes[i].imageURL,
                    postURL: nodes[i].postURL,
                    ballColor,
                    industry: nodes[i].industry,
                    children: nodes[i].children || [],
                    isCentral: false
                });
            }
        }

        const offset = 15; // Hover information offset from cursor

        function isInsideBall(pos, ball) {
            const dist = Math.hypot(pos.x - ball.x, pos.y - ball.y);
            return dist < ball.radius;
        }


        // Handle ball clicks
        document.addEventListener('click', function(evt) {
            const mousePos = getMousePos(canvas, evt);

            // Check if the click is within any ball on the canvas
            balls.forEach(ball => {
                if (isInsideBall(mousePos, ball)) {
                    ballClicked = true;

                    if (ball.isCentral) {
                        displayBallDetails(ball);
                    } else if (ball.children && ball.children.length > 0) {
                        currentNode = ball;
                        balls = [];
                        displayBallDetails(currentNode);
                    } else {
                        displayBallDetails(ball);
                    }
                }
            });
        });

        // Debounce hover functionality to prevent excessive event calls
        let hoverTimeout;

        // Handle mouse movements for hover information
        canvas.addEventListener('mousemove', function(evt) {
            clearTimeout(hoverTimeout);

            hoverTimeout = setTimeout(() => {
                const mousePos = getMousePos(canvas, evt);

                // Check if hovering over a ball
                const hoveringBall = balls.find(ball => isInsideBall(mousePos, ball));

                if (hoveringBall) {
                    hoveredBall = hoveringBall;
                    showHoverInfo(evt, hoveringBall.name, hoveringBall.description);
                } else if (hoveredBall) {
                    hideHoverInfo(); // Hide if no longer hovering over a ball
                    hoveredBall = null;
                }
            }, 10); // Adjust debounce delay based on UI performance
        });

        // Display hover information near the cursor
        function showHoverInfo(event, name, description) {
            hoverInfo.style.left = `${event.clientX + offset}px`;
            hoverInfo.style.top = `${event.clientY + offset}px`;
            hoverInfo.innerHTML = `
                <div class="p-2 bg-white border border-gray-200 rounded-lg shadow-lg dark:bg-gray-800 dark:border-gray-700">
                    <strong class="font-semibold text-gray-900 dark:text-white">${name}</strong>
                    <p class="text-sm text-gray-600 dark:text-gray-400">${description}</p>
                </div>
            `;
            hoverInfo.style.display = 'block';
        }

        // Hide hover information
        function hideHoverInfo() {
            hoverInfo.style.display = 'none';
        }

        function displayBallDetails(ball) {
            const ballDetails = document.getElementById('ballDetails');

            if (!ball || !ball.imageURL || !ball.name || !ball.description || !ball.postURL || !ball.industry) {
                console.error("Invalid ball data:", ball);
                ballDetails.innerHTML = "<p>Error: Invalid ball data.</p>";
                ballDetails.hidden = false;
                return; // Important: Exit the function early
            }

            // Construct image paths using the new structure
            const avifSrcset = `${ball.imageURL.replace(/\.[^/.]+$/, '.avif')}`;
            const webpSrcset = `${ball.imageURL.replace(/\.[^/.]+$/, '.webp')}`;

            ballDetails.innerHTML = `
                <style>
                    .custom-border {
                        --ball-color: ${ball.ballColor};
                    }
                    .custom-border:hover {
                        border-color: var(--ball-color);
                    }
                    .custom-button {
                        background-color: var(--ball-color);
                        border-color: var(--ball-color);
                    }
                    .custom-button:hover {
                        background-color: black;
                        color: var(--ball-color);
                    }
                </style>
                <div class="rounded-2xl border-2 border-gray-200 dark:border-gray-700 transition-all duration-300 custom-border">
                    <div class="relative overflow-hidden w-full rounded-2xl">
                        <picture>
                            <source srcset="${avifSrcset}" type="image/avif" media="(feature-detect: format(avif))" />
                            <source srcset="${webpSrcset}" type="image/webp" media="(feature-detect: format(webp))" />
                            <img
                                src="${ball.imageURL}"
                                alt="${ball.name}"
                                width="1600"
                                height="900"
                                class="object-fit w-full h-[300px] sm:h-[320px] md:h-[350px] lg:h-[370px] xl:h-[370px] 2xl:h-[390px] 4k:h-[400px]"
                                decoding="async"
                                loading="lazy"
                            />
                        </picture>
                        <div class="absolute inset-0 flex flex-col justify-end text-left bg-gradient-to-t from-black/60 to-transparent">
                            <div class="relative flex-col p4">
                                <h3 class="text-2xl font-bold text-white ml-2">${ball.name}</h3>
                                <p class="text-sm text-gray-300 line-clamp-3 mb-2 ml-2 dark:text-gray-200">${ball.description}</p>
                                <a href="${ball.postURL}" class="inline-block ml-2 mb-2 text-white px-2 py-1 transition-colors duration-300 rounded-bl-full rounded-r-full border relative group custom-button">
                                    Explore more
                                    <span class="inline-block transition-transform duration-300 group-hover:hidden">&rang;</span>
                                    <span class="transition-transform duration-300 hidden group-hover:inline-block">&rarr;</span>
                                </a>
                            </div>
                        </div>
                    </div>
                </div>
            `;

            ballDetails.hidden = false;
        }
            
        draw();
        displayBallDetails(currentNode);
    </script>
</Layout>
